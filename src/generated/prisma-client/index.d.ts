// Code generated by Prisma (prisma@1.29.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  creation: (where?: CreationWhereInput) => Promise<boolean>;
  ingredient: (where?: IngredientWhereInput) => Promise<boolean>;
  link: (where?: LinkWhereInput) => Promise<boolean>;
  saved_Recipe: (where?: Saved_RecipeWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  comment: (where: CommentWhereUniqueInput) => CommentPromise;
  comments: (
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Comment>;
  commentsConnection: (
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CommentConnectionPromise;
  creation: (where: CreationWhereUniqueInput) => CreationPromise;
  creations: (
    args?: {
      where?: CreationWhereInput;
      orderBy?: CreationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Creation>;
  creationsConnection: (
    args?: {
      where?: CreationWhereInput;
      orderBy?: CreationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CreationConnectionPromise;
  ingredient: (where: IngredientWhereUniqueInput) => IngredientPromise;
  ingredients: (
    args?: {
      where?: IngredientWhereInput;
      orderBy?: IngredientOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Ingredient>;
  ingredientsConnection: (
    args?: {
      where?: IngredientWhereInput;
      orderBy?: IngredientOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => IngredientConnectionPromise;
  link: (where: LinkWhereUniqueInput) => LinkPromise;
  links: (
    args?: {
      where?: LinkWhereInput;
      orderBy?: LinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Link>;
  linksConnection: (
    args?: {
      where?: LinkWhereInput;
      orderBy?: LinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => LinkConnectionPromise;
  saved_Recipe: (where: Saved_RecipeWhereUniqueInput) => Saved_RecipePromise;
  saved_Recipes: (
    args?: {
      where?: Saved_RecipeWhereInput;
      orderBy?: Saved_RecipeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Saved_Recipe>;
  saved_RecipesConnection: (
    args?: {
      where?: Saved_RecipeWhereInput;
      orderBy?: Saved_RecipeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Saved_RecipeConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (
    args: { data: CommentUpdateInput; where: CommentWhereUniqueInput }
  ) => CommentPromise;
  updateManyComments: (
    args: { data: CommentUpdateManyMutationInput; where?: CommentWhereInput }
  ) => BatchPayloadPromise;
  upsertComment: (
    args: {
      where: CommentWhereUniqueInput;
      create: CommentCreateInput;
      update: CommentUpdateInput;
    }
  ) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createCreation: (data: CreationCreateInput) => CreationPromise;
  updateCreation: (
    args: { data: CreationUpdateInput; where: CreationWhereUniqueInput }
  ) => CreationPromise;
  updateManyCreations: (
    args: { data: CreationUpdateManyMutationInput; where?: CreationWhereInput }
  ) => BatchPayloadPromise;
  upsertCreation: (
    args: {
      where: CreationWhereUniqueInput;
      create: CreationCreateInput;
      update: CreationUpdateInput;
    }
  ) => CreationPromise;
  deleteCreation: (where: CreationWhereUniqueInput) => CreationPromise;
  deleteManyCreations: (where?: CreationWhereInput) => BatchPayloadPromise;
  createIngredient: (data: IngredientCreateInput) => IngredientPromise;
  updateIngredient: (
    args: { data: IngredientUpdateInput; where: IngredientWhereUniqueInput }
  ) => IngredientPromise;
  updateManyIngredients: (
    args: {
      data: IngredientUpdateManyMutationInput;
      where?: IngredientWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertIngredient: (
    args: {
      where: IngredientWhereUniqueInput;
      create: IngredientCreateInput;
      update: IngredientUpdateInput;
    }
  ) => IngredientPromise;
  deleteIngredient: (where: IngredientWhereUniqueInput) => IngredientPromise;
  deleteManyIngredients: (where?: IngredientWhereInput) => BatchPayloadPromise;
  createLink: (data: LinkCreateInput) => LinkPromise;
  updateLink: (
    args: { data: LinkUpdateInput; where: LinkWhereUniqueInput }
  ) => LinkPromise;
  updateManyLinks: (
    args: { data: LinkUpdateManyMutationInput; where?: LinkWhereInput }
  ) => BatchPayloadPromise;
  upsertLink: (
    args: {
      where: LinkWhereUniqueInput;
      create: LinkCreateInput;
      update: LinkUpdateInput;
    }
  ) => LinkPromise;
  deleteLink: (where: LinkWhereUniqueInput) => LinkPromise;
  deleteManyLinks: (where?: LinkWhereInput) => BatchPayloadPromise;
  createSaved_Recipe: (data: Saved_RecipeCreateInput) => Saved_RecipePromise;
  updateSaved_Recipe: (
    args: { data: Saved_RecipeUpdateInput; where: Saved_RecipeWhereUniqueInput }
  ) => Saved_RecipePromise;
  updateManySaved_Recipes: (
    args: {
      data: Saved_RecipeUpdateManyMutationInput;
      where?: Saved_RecipeWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertSaved_Recipe: (
    args: {
      where: Saved_RecipeWhereUniqueInput;
      create: Saved_RecipeCreateInput;
      update: Saved_RecipeUpdateInput;
    }
  ) => Saved_RecipePromise;
  deleteSaved_Recipe: (
    where: Saved_RecipeWhereUniqueInput
  ) => Saved_RecipePromise;
  deleteManySaved_Recipes: (
    where?: Saved_RecipeWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  creation: (
    where?: CreationSubscriptionWhereInput
  ) => CreationSubscriptionPayloadSubscription;
  ingredient: (
    where?: IngredientSubscriptionWhereInput
  ) => IngredientSubscriptionPayloadSubscription;
  link: (
    where?: LinkSubscriptionWhereInput
  ) => LinkSubscriptionPayloadSubscription;
  saved_Recipe: (
    where?: Saved_RecipeSubscriptionWhereInput
  ) => Saved_RecipeSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type LinkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "description_ASC"
  | "description_DESC"
  | "url_ASC"
  | "url_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CreationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Saved_RecipeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "recipe_link_ASC"
  | "recipe_link_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type IngredientOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "first_name_ASC"
  | "first_name_DESC"
  | "last_name_ASC"
  | "last_name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface CreationUpdateWithoutCreatedByDataInput {
  name?: String;
  description?: String;
  comments?: CommentUpdateManyWithoutForCreationInput;
}

export type CommentWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CommentUpsertWithWhereUniqueWithoutForCreationInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutForCreationDataInput;
  create: CommentCreateWithoutForCreationInput;
}

export interface Saved_RecipeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  recipe_link?: String;
  recipe_link_not?: String;
  recipe_link_in?: String[] | String;
  recipe_link_not_in?: String[] | String;
  recipe_link_lt?: String;
  recipe_link_lte?: String;
  recipe_link_gt?: String;
  recipe_link_gte?: String;
  recipe_link_contains?: String;
  recipe_link_not_contains?: String;
  recipe_link_starts_with?: String;
  recipe_link_not_starts_with?: String;
  recipe_link_ends_with?: String;
  recipe_link_not_ends_with?: String;
  savedBy?: UserWhereInput;
  AND?: Saved_RecipeWhereInput[] | Saved_RecipeWhereInput;
  OR?: Saved_RecipeWhereInput[] | Saved_RecipeWhereInput;
  NOT?: Saved_RecipeWhereInput[] | Saved_RecipeWhereInput;
}

export interface UserCreateWithoutCreationsInput {
  first_name: String;
  last_name: String;
  email: String;
  password: String;
  links?: LinkCreateManyWithoutPostedByInput;
  comments?: CommentCreateManyWithoutAddedByInput;
  saved?: Saved_RecipeCreateManyWithoutSavedByInput;
}

export interface CreationUpdateInput {
  name?: String;
  description?: String;
  createdBy?: UserUpdateOneWithoutCreationsInput;
  comments?: CommentUpdateManyWithoutForCreationInput;
}

export interface CommentCreateManyWithoutAddedByInput {
  create?:
    | CommentCreateWithoutAddedByInput[]
    | CommentCreateWithoutAddedByInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
}

export interface CommentScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  AND?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  OR?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  NOT?: CommentScalarWhereInput[] | CommentScalarWhereInput;
}

export interface CommentCreateWithoutAddedByInput {
  text: String;
  forCreation?: CreationCreateOneWithoutCommentsInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface CommentUpdateInput {
  text?: String;
  addedBy?: UserUpdateOneWithoutCommentsInput;
  forCreation?: CreationUpdateOneWithoutCommentsInput;
}

export interface LinkWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  postedBy?: UserWhereInput;
  AND?: LinkWhereInput[] | LinkWhereInput;
  OR?: LinkWhereInput[] | LinkWhereInput;
  NOT?: LinkWhereInput[] | LinkWhereInput;
}

export interface UserUpdateOneWithoutCommentsInput {
  create?: UserCreateWithoutCommentsInput;
  update?: UserUpdateWithoutCommentsDataInput;
  upsert?: UserUpsertWithoutCommentsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface LinkSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LinkWhereInput;
  AND?: LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput;
  OR?: LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput;
  NOT?: LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput;
}

export interface UserUpdateWithoutCommentsDataInput {
  first_name?: String;
  last_name?: String;
  email?: String;
  password?: String;
  links?: LinkUpdateManyWithoutPostedByInput;
  creations?: CreationUpdateManyWithoutCreatedByInput;
  saved?: Saved_RecipeUpdateManyWithoutSavedByInput;
}

export interface CreationSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CreationWhereInput;
  AND?: CreationSubscriptionWhereInput[] | CreationSubscriptionWhereInput;
  OR?: CreationSubscriptionWhereInput[] | CreationSubscriptionWhereInput;
  NOT?: CreationSubscriptionWhereInput[] | CreationSubscriptionWhereInput;
}

export interface LinkUpdateManyWithoutPostedByInput {
  create?: LinkCreateWithoutPostedByInput[] | LinkCreateWithoutPostedByInput;
  delete?: LinkWhereUniqueInput[] | LinkWhereUniqueInput;
  connect?: LinkWhereUniqueInput[] | LinkWhereUniqueInput;
  set?: LinkWhereUniqueInput[] | LinkWhereUniqueInput;
  disconnect?: LinkWhereUniqueInput[] | LinkWhereUniqueInput;
  update?:
    | LinkUpdateWithWhereUniqueWithoutPostedByInput[]
    | LinkUpdateWithWhereUniqueWithoutPostedByInput;
  upsert?:
    | LinkUpsertWithWhereUniqueWithoutPostedByInput[]
    | LinkUpsertWithWhereUniqueWithoutPostedByInput;
  deleteMany?: LinkScalarWhereInput[] | LinkScalarWhereInput;
  updateMany?:
    | LinkUpdateManyWithWhereNestedInput[]
    | LinkUpdateManyWithWhereNestedInput;
}

export interface UserUpdateManyMutationInput {
  first_name?: String;
  last_name?: String;
  email?: String;
  password?: String;
}

export interface LinkUpdateWithWhereUniqueWithoutPostedByInput {
  where: LinkWhereUniqueInput;
  data: LinkUpdateWithoutPostedByDataInput;
}

export interface UserUpdateInput {
  first_name?: String;
  last_name?: String;
  email?: String;
  password?: String;
  links?: LinkUpdateManyWithoutPostedByInput;
  creations?: CreationUpdateManyWithoutCreatedByInput;
  comments?: CommentUpdateManyWithoutAddedByInput;
  saved?: Saved_RecipeUpdateManyWithoutSavedByInput;
}

export interface LinkUpdateWithoutPostedByDataInput {
  description?: String;
  url?: String;
}

export interface Saved_RecipeUpdateManyMutationInput {
  recipe_link?: String;
}

export interface LinkUpsertWithWhereUniqueWithoutPostedByInput {
  where: LinkWhereUniqueInput;
  update: LinkUpdateWithoutPostedByDataInput;
  create: LinkCreateWithoutPostedByInput;
}

export interface UserUpsertWithoutSavedInput {
  update: UserUpdateWithoutSavedDataInput;
  create: UserCreateWithoutSavedInput;
}

export interface LinkScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: LinkScalarWhereInput[] | LinkScalarWhereInput;
  OR?: LinkScalarWhereInput[] | LinkScalarWhereInput;
  NOT?: LinkScalarWhereInput[] | LinkScalarWhereInput;
}

export interface UserUpdateWithoutSavedDataInput {
  first_name?: String;
  last_name?: String;
  email?: String;
  password?: String;
  links?: LinkUpdateManyWithoutPostedByInput;
  creations?: CreationUpdateManyWithoutCreatedByInput;
  comments?: CommentUpdateManyWithoutAddedByInput;
}

export interface LinkUpdateManyWithWhereNestedInput {
  where: LinkScalarWhereInput;
  data: LinkUpdateManyDataInput;
}

export interface Saved_RecipeUpdateInput {
  recipe_link?: String;
  savedBy?: UserUpdateOneWithoutSavedInput;
}

export interface LinkUpdateManyDataInput {
  description?: String;
  url?: String;
}

export type LinkWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CreationUpdateManyWithoutCreatedByInput {
  create?:
    | CreationCreateWithoutCreatedByInput[]
    | CreationCreateWithoutCreatedByInput;
  delete?: CreationWhereUniqueInput[] | CreationWhereUniqueInput;
  connect?: CreationWhereUniqueInput[] | CreationWhereUniqueInput;
  set?: CreationWhereUniqueInput[] | CreationWhereUniqueInput;
  disconnect?: CreationWhereUniqueInput[] | CreationWhereUniqueInput;
  update?:
    | CreationUpdateWithWhereUniqueWithoutCreatedByInput[]
    | CreationUpdateWithWhereUniqueWithoutCreatedByInput;
  upsert?:
    | CreationUpsertWithWhereUniqueWithoutCreatedByInput[]
    | CreationUpsertWithWhereUniqueWithoutCreatedByInput;
  deleteMany?: CreationScalarWhereInput[] | CreationScalarWhereInput;
  updateMany?:
    | CreationUpdateManyWithWhereNestedInput[]
    | CreationUpdateManyWithWhereNestedInput;
}

export interface Saved_RecipeCreateInput {
  recipe_link: String;
  savedBy?: UserCreateOneWithoutSavedInput;
}

export interface CreationUpdateWithWhereUniqueWithoutCreatedByInput {
  where: CreationWhereUniqueInput;
  data: CreationUpdateWithoutCreatedByDataInput;
}

export type Saved_RecipeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface IngredientUpdateManyMutationInput {
  name?: String;
}

export interface UserUpdateWithoutLinksDataInput {
  first_name?: String;
  last_name?: String;
  email?: String;
  password?: String;
  creations?: CreationUpdateManyWithoutCreatedByInput;
  comments?: CommentUpdateManyWithoutAddedByInput;
  saved?: Saved_RecipeUpdateManyWithoutSavedByInput;
}

export interface CommentUpdateManyWithoutForCreationInput {
  create?:
    | CommentCreateWithoutForCreationInput[]
    | CommentCreateWithoutForCreationInput;
  delete?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  set?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  disconnect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  update?:
    | CommentUpdateWithWhereUniqueWithoutForCreationInput[]
    | CommentUpdateWithWhereUniqueWithoutForCreationInput;
  upsert?:
    | CommentUpsertWithWhereUniqueWithoutForCreationInput[]
    | CommentUpsertWithWhereUniqueWithoutForCreationInput;
  deleteMany?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  updateMany?:
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface CommentUpdateWithWhereUniqueWithoutForCreationInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutForCreationDataInput;
}

export interface UserCreateWithoutLinksInput {
  first_name: String;
  last_name: String;
  email: String;
  password: String;
  creations?: CreationCreateManyWithoutCreatedByInput;
  comments?: CommentCreateManyWithoutAddedByInput;
  saved?: Saved_RecipeCreateManyWithoutSavedByInput;
}

export interface CommentUpdateWithoutForCreationDataInput {
  text?: String;
  addedBy?: UserUpdateOneWithoutCommentsInput;
}

export interface LinkCreateInput {
  description: String;
  url: String;
  postedBy?: UserCreateOneWithoutLinksInput;
}

export interface CommentWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  addedBy?: UserWhereInput;
  forCreation?: CreationWhereInput;
  AND?: CommentWhereInput[] | CommentWhereInput;
  OR?: CommentWhereInput[] | CommentWhereInput;
  NOT?: CommentWhereInput[] | CommentWhereInput;
}

export interface CommentCreateInput {
  text: String;
  addedBy?: UserCreateOneWithoutCommentsInput;
  forCreation?: CreationCreateOneWithoutCommentsInput;
}

export interface IngredientUpdateInput {
  name?: String;
}

export interface UserCreateWithoutCommentsInput {
  first_name: String;
  last_name: String;
  email: String;
  password: String;
  links?: LinkCreateManyWithoutPostedByInput;
  creations?: CreationCreateManyWithoutCreatedByInput;
  saved?: Saved_RecipeCreateManyWithoutSavedByInput;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface LinkCreateWithoutPostedByInput {
  description: String;
  url: String;
}

export interface CommentUpdateManyDataInput {
  text?: String;
}

export interface CreationCreateWithoutCreatedByInput {
  name: String;
  description: String;
  comments?: CommentCreateManyWithoutForCreationInput;
}

export interface CreationUpsertWithWhereUniqueWithoutCreatedByInput {
  where: CreationWhereUniqueInput;
  update: CreationUpdateWithoutCreatedByDataInput;
  create: CreationCreateWithoutCreatedByInput;
}

export interface CommentCreateWithoutForCreationInput {
  text: String;
  addedBy?: UserCreateOneWithoutCommentsInput;
}

export interface CreationScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  AND?: CreationScalarWhereInput[] | CreationScalarWhereInput;
  OR?: CreationScalarWhereInput[] | CreationScalarWhereInput;
  NOT?: CreationScalarWhereInput[] | CreationScalarWhereInput;
}

export interface Saved_RecipeCreateWithoutSavedByInput {
  recipe_link: String;
}

export interface CreationUpdateManyWithWhereNestedInput {
  where: CreationScalarWhereInput;
  data: CreationUpdateManyDataInput;
}

export interface CreationCreateWithoutCommentsInput {
  name: String;
  description: String;
  createdBy?: UserCreateOneWithoutCreationsInput;
}

export interface CreationUpdateManyDataInput {
  name?: String;
  description?: String;
}

export interface CreationWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  createdBy?: UserWhereInput;
  comments_every?: CommentWhereInput;
  comments_some?: CommentWhereInput;
  comments_none?: CommentWhereInput;
  AND?: CreationWhereInput[] | CreationWhereInput;
  OR?: CreationWhereInput[] | CreationWhereInput;
  NOT?: CreationWhereInput[] | CreationWhereInput;
}

export interface Saved_RecipeUpdateManyWithoutSavedByInput {
  create?:
    | Saved_RecipeCreateWithoutSavedByInput[]
    | Saved_RecipeCreateWithoutSavedByInput;
  delete?: Saved_RecipeWhereUniqueInput[] | Saved_RecipeWhereUniqueInput;
  connect?: Saved_RecipeWhereUniqueInput[] | Saved_RecipeWhereUniqueInput;
  set?: Saved_RecipeWhereUniqueInput[] | Saved_RecipeWhereUniqueInput;
  disconnect?: Saved_RecipeWhereUniqueInput[] | Saved_RecipeWhereUniqueInput;
  update?:
    | Saved_RecipeUpdateWithWhereUniqueWithoutSavedByInput[]
    | Saved_RecipeUpdateWithWhereUniqueWithoutSavedByInput;
  upsert?:
    | Saved_RecipeUpsertWithWhereUniqueWithoutSavedByInput[]
    | Saved_RecipeUpsertWithWhereUniqueWithoutSavedByInput;
  deleteMany?: Saved_RecipeScalarWhereInput[] | Saved_RecipeScalarWhereInput;
  updateMany?:
    | Saved_RecipeUpdateManyWithWhereNestedInput[]
    | Saved_RecipeUpdateManyWithWhereNestedInput;
}

export interface Saved_RecipeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Saved_RecipeWhereInput;
  AND?:
    | Saved_RecipeSubscriptionWhereInput[]
    | Saved_RecipeSubscriptionWhereInput;
  OR?:
    | Saved_RecipeSubscriptionWhereInput[]
    | Saved_RecipeSubscriptionWhereInput;
  NOT?:
    | Saved_RecipeSubscriptionWhereInput[]
    | Saved_RecipeSubscriptionWhereInput;
}

export interface Saved_RecipeUpdateWithWhereUniqueWithoutSavedByInput {
  where: Saved_RecipeWhereUniqueInput;
  data: Saved_RecipeUpdateWithoutSavedByDataInput;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CommentWhereInput;
  AND?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput;
  OR?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput;
  NOT?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput;
}

export interface Saved_RecipeUpdateWithoutSavedByDataInput {
  recipe_link?: String;
}

export interface UserCreateInput {
  first_name: String;
  last_name: String;
  email: String;
  password: String;
  links?: LinkCreateManyWithoutPostedByInput;
  creations?: CreationCreateManyWithoutCreatedByInput;
  comments?: CommentCreateManyWithoutAddedByInput;
  saved?: Saved_RecipeCreateManyWithoutSavedByInput;
}

export interface Saved_RecipeUpsertWithWhereUniqueWithoutSavedByInput {
  where: Saved_RecipeWhereUniqueInput;
  update: Saved_RecipeUpdateWithoutSavedByDataInput;
  create: Saved_RecipeCreateWithoutSavedByInput;
}

export interface IngredientWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: IngredientWhereInput[] | IngredientWhereInput;
  OR?: IngredientWhereInput[] | IngredientWhereInput;
  NOT?: IngredientWhereInput[] | IngredientWhereInput;
}

export interface Saved_RecipeScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  recipe_link?: String;
  recipe_link_not?: String;
  recipe_link_in?: String[] | String;
  recipe_link_not_in?: String[] | String;
  recipe_link_lt?: String;
  recipe_link_lte?: String;
  recipe_link_gt?: String;
  recipe_link_gte?: String;
  recipe_link_contains?: String;
  recipe_link_not_contains?: String;
  recipe_link_starts_with?: String;
  recipe_link_not_starts_with?: String;
  recipe_link_ends_with?: String;
  recipe_link_not_ends_with?: String;
  AND?: Saved_RecipeScalarWhereInput[] | Saved_RecipeScalarWhereInput;
  OR?: Saved_RecipeScalarWhereInput[] | Saved_RecipeScalarWhereInput;
  NOT?: Saved_RecipeScalarWhereInput[] | Saved_RecipeScalarWhereInput;
}

export interface UserCreateWithoutSavedInput {
  first_name: String;
  last_name: String;
  email: String;
  password: String;
  links?: LinkCreateManyWithoutPostedByInput;
  creations?: CreationCreateManyWithoutCreatedByInput;
  comments?: CommentCreateManyWithoutAddedByInput;
}

export interface Saved_RecipeUpdateManyWithWhereNestedInput {
  where: Saved_RecipeScalarWhereInput;
  data: Saved_RecipeUpdateManyDataInput;
}

export interface LinkUpdateManyMutationInput {
  description?: String;
  url?: String;
}

export interface Saved_RecipeUpdateManyDataInput {
  recipe_link?: String;
}

export interface UserUpdateOneWithoutLinksInput {
  create?: UserCreateWithoutLinksInput;
  update?: UserUpdateWithoutLinksDataInput;
  upsert?: UserUpsertWithoutLinksInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput;
  create: UserCreateWithoutCommentsInput;
}

export interface UserCreateOneWithoutLinksInput {
  create?: UserCreateWithoutLinksInput;
  connect?: UserWhereUniqueInput;
}

export interface CreationUpdateOneWithoutCommentsInput {
  create?: CreationCreateWithoutCommentsInput;
  update?: CreationUpdateWithoutCommentsDataInput;
  upsert?: CreationUpsertWithoutCommentsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CreationWhereUniqueInput;
}

export interface UserCreateOneWithoutCommentsInput {
  create?: UserCreateWithoutCommentsInput;
  connect?: UserWhereUniqueInput;
}

export interface CreationUpdateWithoutCommentsDataInput {
  name?: String;
  description?: String;
  createdBy?: UserUpdateOneWithoutCreationsInput;
}

export interface CreationCreateManyWithoutCreatedByInput {
  create?:
    | CreationCreateWithoutCreatedByInput[]
    | CreationCreateWithoutCreatedByInput;
  connect?: CreationWhereUniqueInput[] | CreationWhereUniqueInput;
}

export interface UserUpdateOneWithoutCreationsInput {
  create?: UserCreateWithoutCreationsInput;
  update?: UserUpdateWithoutCreationsDataInput;
  upsert?: UserUpsertWithoutCreationsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface Saved_RecipeCreateManyWithoutSavedByInput {
  create?:
    | Saved_RecipeCreateWithoutSavedByInput[]
    | Saved_RecipeCreateWithoutSavedByInput;
  connect?: Saved_RecipeWhereUniqueInput[] | Saved_RecipeWhereUniqueInput;
}

export interface UserUpdateWithoutCreationsDataInput {
  first_name?: String;
  last_name?: String;
  email?: String;
  password?: String;
  links?: LinkUpdateManyWithoutPostedByInput;
  comments?: CommentUpdateManyWithoutAddedByInput;
  saved?: Saved_RecipeUpdateManyWithoutSavedByInput;
}

export interface UserCreateOneWithoutCreationsInput {
  create?: UserCreateWithoutCreationsInput;
  connect?: UserWhereUniqueInput;
}

export interface CommentUpdateManyWithoutAddedByInput {
  create?:
    | CommentCreateWithoutAddedByInput[]
    | CommentCreateWithoutAddedByInput;
  delete?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  set?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  disconnect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  update?:
    | CommentUpdateWithWhereUniqueWithoutAddedByInput[]
    | CommentUpdateWithWhereUniqueWithoutAddedByInput;
  upsert?:
    | CommentUpsertWithWhereUniqueWithoutAddedByInput[]
    | CommentUpsertWithWhereUniqueWithoutAddedByInput;
  deleteMany?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  updateMany?:
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput;
}

export interface IngredientSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: IngredientWhereInput;
  AND?: IngredientSubscriptionWhereInput[] | IngredientSubscriptionWhereInput;
  OR?: IngredientSubscriptionWhereInput[] | IngredientSubscriptionWhereInput;
  NOT?: IngredientSubscriptionWhereInput[] | IngredientSubscriptionWhereInput;
}

export interface CommentUpdateWithWhereUniqueWithoutAddedByInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutAddedByDataInput;
}

export type IngredientWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CommentUpdateWithoutAddedByDataInput {
  text?: String;
  forCreation?: CreationUpdateOneWithoutCommentsInput;
}

export interface UserCreateOneWithoutSavedInput {
  create?: UserCreateWithoutSavedInput;
  connect?: UserWhereUniqueInput;
}

export interface CommentUpsertWithWhereUniqueWithoutAddedByInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutAddedByDataInput;
  create: CommentCreateWithoutAddedByInput;
}

export interface LinkUpdateInput {
  description?: String;
  url?: String;
  postedBy?: UserUpdateOneWithoutLinksInput;
}

export interface UserUpsertWithoutCreationsInput {
  update: UserUpdateWithoutCreationsDataInput;
  create: UserCreateWithoutCreationsInput;
}

export interface LinkCreateManyWithoutPostedByInput {
  create?: LinkCreateWithoutPostedByInput[] | LinkCreateWithoutPostedByInput;
  connect?: LinkWhereUniqueInput[] | LinkWhereUniqueInput;
}

export interface CreationUpsertWithoutCommentsInput {
  update: CreationUpdateWithoutCommentsDataInput;
  create: CreationCreateWithoutCommentsInput;
}

export interface CreationCreateOneWithoutCommentsInput {
  create?: CreationCreateWithoutCommentsInput;
  connect?: CreationWhereUniqueInput;
}

export type CreationWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CreationCreateInput {
  name: String;
  description: String;
  createdBy?: UserCreateOneWithoutCreationsInput;
  comments?: CommentCreateManyWithoutForCreationInput;
}

export interface CreationUpdateManyMutationInput {
  name?: String;
  description?: String;
}

export interface IngredientCreateInput {
  name: String;
}

export interface CommentUpdateManyMutationInput {
  text?: String;
}

export interface UserUpdateOneWithoutSavedInput {
  create?: UserCreateWithoutSavedInput;
  update?: UserUpdateWithoutSavedDataInput;
  upsert?: UserUpsertWithoutSavedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  first_name?: String;
  first_name_not?: String;
  first_name_in?: String[] | String;
  first_name_not_in?: String[] | String;
  first_name_lt?: String;
  first_name_lte?: String;
  first_name_gt?: String;
  first_name_gte?: String;
  first_name_contains?: String;
  first_name_not_contains?: String;
  first_name_starts_with?: String;
  first_name_not_starts_with?: String;
  first_name_ends_with?: String;
  first_name_not_ends_with?: String;
  last_name?: String;
  last_name_not?: String;
  last_name_in?: String[] | String;
  last_name_not_in?: String[] | String;
  last_name_lt?: String;
  last_name_lte?: String;
  last_name_gt?: String;
  last_name_gte?: String;
  last_name_contains?: String;
  last_name_not_contains?: String;
  last_name_starts_with?: String;
  last_name_not_starts_with?: String;
  last_name_ends_with?: String;
  last_name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  links_every?: LinkWhereInput;
  links_some?: LinkWhereInput;
  links_none?: LinkWhereInput;
  creations_every?: CreationWhereInput;
  creations_some?: CreationWhereInput;
  creations_none?: CreationWhereInput;
  comments_every?: CommentWhereInput;
  comments_some?: CommentWhereInput;
  comments_none?: CommentWhereInput;
  saved_every?: Saved_RecipeWhereInput;
  saved_some?: Saved_RecipeWhereInput;
  saved_none?: Saved_RecipeWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface CommentCreateManyWithoutForCreationInput {
  create?:
    | CommentCreateWithoutForCreationInput[]
    | CommentCreateWithoutForCreationInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
}

export interface UserUpsertWithoutLinksInput {
  update: UserUpdateWithoutLinksDataInput;
  create: UserCreateWithoutLinksInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  first_name: String;
  last_name: String;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  first_name: () => Promise<String>;
  last_name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  first_name: () => Promise<AsyncIterator<String>>;
  last_name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCreation {
  count: Int;
}

export interface AggregateCreationPromise
  extends Promise<AggregateCreation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCreationSubscription
  extends Promise<AsyncIterator<AggregateCreation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Saved_RecipeSubscriptionPayload {
  mutation: MutationType;
  node: Saved_Recipe;
  updatedFields: String[];
  previousValues: Saved_RecipePreviousValues;
}

export interface Saved_RecipeSubscriptionPayloadPromise
  extends Promise<Saved_RecipeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Saved_RecipePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Saved_RecipePreviousValuesPromise>() => T;
}

export interface Saved_RecipeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Saved_RecipeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Saved_RecipeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Saved_RecipePreviousValuesSubscription>() => T;
}

export interface CreationEdge {
  node: Creation;
  cursor: String;
}

export interface CreationEdgePromise
  extends Promise<CreationEdge>,
    Fragmentable {
  node: <T = CreationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CreationEdgeSubscription
  extends Promise<AsyncIterator<CreationEdge>>,
    Fragmentable {
  node: <T = CreationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CreationConnection {
  pageInfo: PageInfo;
  edges: CreationEdge[];
}

export interface CreationConnectionPromise
  extends Promise<CreationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CreationEdge>>() => T;
  aggregate: <T = AggregateCreationPromise>() => T;
}

export interface CreationConnectionSubscription
  extends Promise<AsyncIterator<CreationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CreationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCreationSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Creation {
  id: ID_Output;
  name: String;
  description: String;
}

export interface CreationPromise extends Promise<Creation>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  createdBy: <T = UserPromise>() => T;
  comments: <T = FragmentableArray<Comment>>(
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CreationSubscription
  extends Promise<AsyncIterator<Creation>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdBy: <T = UserSubscription>() => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Comment {
  id: ID_Output;
  text: String;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  addedBy: <T = UserPromise>() => T;
  forCreation: <T = CreationPromise>() => T;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  addedBy: <T = UserSubscription>() => T;
  forCreation: <T = CreationSubscription>() => T;
}

export interface Saved_RecipeEdge {
  node: Saved_Recipe;
  cursor: String;
}

export interface Saved_RecipeEdgePromise
  extends Promise<Saved_RecipeEdge>,
    Fragmentable {
  node: <T = Saved_RecipePromise>() => T;
  cursor: () => Promise<String>;
}

export interface Saved_RecipeEdgeSubscription
  extends Promise<AsyncIterator<Saved_RecipeEdge>>,
    Fragmentable {
  node: <T = Saved_RecipeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface AggregateLink {
  count: Int;
}

export interface AggregateLinkPromise
  extends Promise<AggregateLink>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLinkSubscription
  extends Promise<AsyncIterator<AggregateLink>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommentPreviousValues {
  id: ID_Output;
  text: String;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
}

export interface LinkConnection {
  pageInfo: PageInfo;
  edges: LinkEdge[];
}

export interface LinkConnectionPromise
  extends Promise<LinkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LinkEdge>>() => T;
  aggregate: <T = AggregateLinkPromise>() => T;
}

export interface LinkConnectionSubscription
  extends Promise<AsyncIterator<LinkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LinkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLinkSubscription>() => T;
}

export interface Saved_RecipePreviousValues {
  id: ID_Output;
  recipe_link: String;
}

export interface Saved_RecipePreviousValuesPromise
  extends Promise<Saved_RecipePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  recipe_link: () => Promise<String>;
}

export interface Saved_RecipePreviousValuesSubscription
  extends Promise<AsyncIterator<Saved_RecipePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  recipe_link: () => Promise<AsyncIterator<String>>;
}

export interface IngredientEdge {
  node: Ingredient;
  cursor: String;
}

export interface IngredientEdgePromise
  extends Promise<IngredientEdge>,
    Fragmentable {
  node: <T = IngredientPromise>() => T;
  cursor: () => Promise<String>;
}

export interface IngredientEdgeSubscription
  extends Promise<AsyncIterator<IngredientEdge>>,
    Fragmentable {
  node: <T = IngredientSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CreationSubscriptionPayload {
  mutation: MutationType;
  node: Creation;
  updatedFields: String[];
  previousValues: CreationPreviousValues;
}

export interface CreationSubscriptionPayloadPromise
  extends Promise<CreationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CreationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CreationPreviousValuesPromise>() => T;
}

export interface CreationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CreationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CreationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CreationPreviousValuesSubscription>() => T;
}

export interface User {
  id: ID_Output;
  first_name: String;
  last_name: String;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  first_name: () => Promise<String>;
  last_name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  links: <T = FragmentableArray<Link>>(
    args?: {
      where?: LinkWhereInput;
      orderBy?: LinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  creations: <T = FragmentableArray<Creation>>(
    args?: {
      where?: CreationWhereInput;
      orderBy?: CreationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  comments: <T = FragmentableArray<Comment>>(
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  saved: <T = FragmentableArray<Saved_Recipe>>(
    args?: {
      where?: Saved_RecipeWhereInput;
      orderBy?: Saved_RecipeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  first_name: () => Promise<AsyncIterator<String>>;
  last_name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  links: <T = Promise<AsyncIterator<LinkSubscription>>>(
    args?: {
      where?: LinkWhereInput;
      orderBy?: LinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  creations: <T = Promise<AsyncIterator<CreationSubscription>>>(
    args?: {
      where?: CreationWhereInput;
      orderBy?: CreationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  saved: <T = Promise<AsyncIterator<Saved_RecipeSubscription>>>(
    args?: {
      where?: Saved_RecipeWhereInput;
      orderBy?: Saved_RecipeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CreationPreviousValues {
  id: ID_Output;
  name: String;
  description: String;
}

export interface CreationPreviousValuesPromise
  extends Promise<CreationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
}

export interface CreationPreviousValuesSubscription
  extends Promise<AsyncIterator<CreationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface Link {
  id: ID_Output;
  description: String;
  url: String;
}

export interface LinkPromise extends Promise<Link>, Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
  url: () => Promise<String>;
  postedBy: <T = UserPromise>() => T;
}

export interface LinkSubscription
  extends Promise<AsyncIterator<Link>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  description: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  postedBy: <T = UserSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface IngredientSubscriptionPayload {
  mutation: MutationType;
  node: Ingredient;
  updatedFields: String[];
  previousValues: IngredientPreviousValues;
}

export interface IngredientSubscriptionPayloadPromise
  extends Promise<IngredientSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = IngredientPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = IngredientPreviousValuesPromise>() => T;
}

export interface IngredientSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<IngredientSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = IngredientSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = IngredientPreviousValuesSubscription>() => T;
}

export interface Saved_RecipeConnection {
  pageInfo: PageInfo;
  edges: Saved_RecipeEdge[];
}

export interface Saved_RecipeConnectionPromise
  extends Promise<Saved_RecipeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Saved_RecipeEdge>>() => T;
  aggregate: <T = AggregateSaved_RecipePromise>() => T;
}

export interface Saved_RecipeConnectionSubscription
  extends Promise<AsyncIterator<Saved_RecipeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Saved_RecipeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSaved_RecipeSubscription>() => T;
}

export interface IngredientPreviousValues {
  id: ID_Output;
  name: String;
}

export interface IngredientPreviousValuesPromise
  extends Promise<IngredientPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface IngredientPreviousValuesSubscription
  extends Promise<AsyncIterator<IngredientPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregateIngredient {
  count: Int;
}

export interface AggregateIngredientPromise
  extends Promise<AggregateIngredient>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateIngredientSubscription
  extends Promise<AsyncIterator<AggregateIngredient>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Ingredient {
  id: ID_Output;
  name: String;
}

export interface IngredientPromise extends Promise<Ingredient>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface IngredientSubscription
  extends Promise<AsyncIterator<Ingredient>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface Saved_Recipe {
  id: ID_Output;
  recipe_link: String;
}

export interface Saved_RecipePromise
  extends Promise<Saved_Recipe>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  recipe_link: () => Promise<String>;
  savedBy: <T = UserPromise>() => T;
}

export interface Saved_RecipeSubscription
  extends Promise<AsyncIterator<Saved_Recipe>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  recipe_link: () => Promise<AsyncIterator<String>>;
  savedBy: <T = UserSubscription>() => T;
}

export interface LinkPreviousValues {
  id: ID_Output;
  description: String;
  url: String;
}

export interface LinkPreviousValuesPromise
  extends Promise<LinkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
  url: () => Promise<String>;
}

export interface LinkPreviousValuesSubscription
  extends Promise<AsyncIterator<LinkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  description: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface LinkSubscriptionPayload {
  mutation: MutationType;
  node: Link;
  updatedFields: String[];
  previousValues: LinkPreviousValues;
}

export interface LinkSubscriptionPayloadPromise
  extends Promise<LinkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LinkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LinkPreviousValuesPromise>() => T;
}

export interface LinkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LinkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LinkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LinkPreviousValuesSubscription>() => T;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface IngredientConnection {
  pageInfo: PageInfo;
  edges: IngredientEdge[];
}

export interface IngredientConnectionPromise
  extends Promise<IngredientConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<IngredientEdge>>() => T;
  aggregate: <T = AggregateIngredientPromise>() => T;
}

export interface IngredientConnectionSubscription
  extends Promise<AsyncIterator<IngredientConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<IngredientEdgeSubscription>>>() => T;
  aggregate: <T = AggregateIngredientSubscription>() => T;
}

export interface LinkEdge {
  node: Link;
  cursor: String;
}

export interface LinkEdgePromise extends Promise<LinkEdge>, Fragmentable {
  node: <T = LinkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LinkEdgeSubscription
  extends Promise<AsyncIterator<LinkEdge>>,
    Fragmentable {
  node: <T = LinkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSaved_Recipe {
  count: Int;
}

export interface AggregateSaved_RecipePromise
  extends Promise<AggregateSaved_Recipe>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSaved_RecipeSubscription
  extends Promise<AsyncIterator<AggregateSaved_Recipe>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Link",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Creation",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  },
  {
    name: "Saved_Recipe",
    embedded: false
  },
  {
    name: "Ingredient",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
